{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GeoArchive The GeoArchive is a loosely coupled architecture for adopting various kinds of data, information, and knowledge repositories as archives of important scientific material that an institution (the USGS in this case) wants to adopt for long-term curation and management. The archives of the GeoArchive construct are considered \"active archives\" in that they may be used in practice. This Python package provides utilities for operating curation and management tasks in standardized ways across different types of third party technologies. Enterprise archival tasks include things like: Registering a repository for adoption Reading and checking the metadata that describe items in a repository for compliance with standards and conventions that make the materials viable for archival Examining, evaluating, and reporting on the digital contents of a repository, classifying materials as to their long-term viability and recommended actions for curation Pulling all or select materials from a participating repository into a long-term backup/storage solution Registering links for a repository's items through a handle system for the purpose of creating long-lasting references Creating additional linkages for the items in a repository and/or descriptive metadata to other information sources inside or outside the GeoArchive framework (e.g., between repositories known to the GeoArchive, between items in a GeoArchive repository and third party information systems) Note: This is a work in progress project that has certain aspects which are highly tuned specifically to the USGS and what we are doing with this concept. We will be working to generalize functionality over time such that it may prove useful to others as well. Installing pip install geoarchive Modules We are designing the package to contain individual modules for interacting with different types of third party repository systems that serve as sources for GeoArchive collections. Each module has its own specific requirements and dependencies for what it needs to do to make its specific connections. All modules will likely require some type of specific connection information.","title":"GeoArchive"},{"location":"#geoarchive","text":"The GeoArchive is a loosely coupled architecture for adopting various kinds of data, information, and knowledge repositories as archives of important scientific material that an institution (the USGS in this case) wants to adopt for long-term curation and management. The archives of the GeoArchive construct are considered \"active archives\" in that they may be used in practice. This Python package provides utilities for operating curation and management tasks in standardized ways across different types of third party technologies. Enterprise archival tasks include things like: Registering a repository for adoption Reading and checking the metadata that describe items in a repository for compliance with standards and conventions that make the materials viable for archival Examining, evaluating, and reporting on the digital contents of a repository, classifying materials as to their long-term viability and recommended actions for curation Pulling all or select materials from a participating repository into a long-term backup/storage solution Registering links for a repository's items through a handle system for the purpose of creating long-lasting references Creating additional linkages for the items in a repository and/or descriptive metadata to other information sources inside or outside the GeoArchive framework (e.g., between repositories known to the GeoArchive, between items in a GeoArchive repository and third party information systems) Note: This is a work in progress project that has certain aspects which are highly tuned specifically to the USGS and what we are doing with this concept. We will be working to generalize functionality over time such that it may prove useful to others as well.","title":"GeoArchive"},{"location":"#installing","text":"pip install geoarchive","title":"Installing"},{"location":"#modules","text":"We are designing the package to contain individual modules for interacting with different types of third party repository systems that serve as sources for GeoArchive collections. Each module has its own specific requirements and dependencies for what it needs to do to make its specific connections. All modules will likely require some type of specific connection information.","title":"Modules"},{"location":"modules/zotero/","text":"Zotero Our initial GeoArchive use case is for using a Zotero group library as a repository of document-type materials. Zotero is a reference management software tool that includes an online shared storage offering where Group Libraries can be set up for citation metadata and attached file content. This module leverages the pyzotero package to create an instance of an API connection to a specified Group Library in Zotero and a set of functions for working with that connection in a variety of ways. It requires a library_id and an api_key, which can be supplied through environment variables or through passed variables in instantiating the connection. Certain functionality also requires the specification of a inventory_item, which is the identifier for a specific item stored in the library that contains a cache of metadata. API class geoarchive.zotero. Zot ( library_id , api_key ) baseline_cache ( self , inventory_item , output_path='data' ) This function takes the files found in a specified output_path (from baseline or update) for items, collections, and tags and uploads these to the specified inventory item in the library. This function can only be successfully operated using an API key with write permissions. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". Returns: bool: False if the API key does not have permission to write to the library baseline_collections ( self , output_path='data' ) This function gets all collections for a library and dumps them as a JSON file to a specified output path. Args: output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". baseline_items ( self , inventory_item , output_path='data' ) This function gets all items (metadata and files) for a library and dumps them as a JSON file to a specified output path. It will strip out any items associated with the inventory item. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". baseline_tags ( self , output_path='data' ) This function gets all tags for a library and dumps them as a JSON file to a specified output path. Args: output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". build_identifier ( self , record ) Builds identifier objects for a particular type of export format. Args: record (series): Dataframe series (record) Returns: list: List of identifier objects/dicts build_link ( self , record ) Builds link objects for a particular type of export format. Args: record (series): Dataframe series (record) Returns: list: List of link objects/dicts collection_tags ( self , geo_tags=True , custom_tags=None ) This is a fairly specialized function that interprets collections from the Zotero library to turn these into additional type-classified tags. Args: geo_tags (bool, optional): Specifies whether or not to check collections for geo names. Defaults to True. custom_tags (list, optional): List of lists of specific types of additional tags that should be found within the collection structure of a library. Defaults to None. Returns: list: List of additional tags as compound, type-classified strings containing a type and term. get_inventory_files ( self , inventory_item ) To facilitate efficient access to larger libraries, we established a method of building and maintaining a specific item in the library where we cache inventory data as JSON files which can be retrieved in lieu of what can be a time-consuming pull of the entire recordset via the API. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library Returns: list: List of dictionaries from the Zotero API containing the inventory item and its files item_export ( self , inventory_item , target_schema='xdd' , output_format='dataframe' ) This function packages the items for a given library using the cached inventory files and returns them for some particular use. We need to better work up the configuration details for this so that we can accept some form of configuration principals that are used to determine the appropriate mappings or transformations. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library target_schema (str, optional): The particular target output being transformed to. Defaults to \"xdd\". output_format (str, optional): Determines the output format for the transformation. Defaults to \"dataframe\". Returns: dataframe/list: Either a dataframe (default) containing the transformation or a list of dicts. load_df_inventory ( self , raw_inventory , tag_delimiter=':' ) This function takes the raw inventory dict containing three sets of records for items, collections, and tags and builds Pandas dataframes for further processing. We do some minimal processing on tags to split these out using a \":\" delimiter by default. Args: raw_inventory (dict): Dictionary contanining three keys with lists for items, collections, and tags from load_raw_inventory() tag_delimiter (str, optional): Delimiter to use in splitting tags into classes. Defaults to \":\". Returns: dict: Dictionary containing three dataframes for items, collections, and tags load_raw_inventory ( self , inventory_item ) This function loads the raw inventory information for items, collections, and tags stored in the inventory item as JSON files. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library Returns: dict: Dictionary containing lists for each set of cached records - items, collections, and tags update_inventory ( self , inventory_item , output_path='data' ) This function handles a periodic refresh of the cached inventory. It reads the current inventory files, determines the last version of the library cached, retrieves new records (items, collections, tags), and updates the cached files. This function can only be successfully operated using an API key with write permissions. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". Returns: bool: False if the API key does not have permission to write to the library","title":"Zotero"},{"location":"modules/zotero/#zotero","text":"Our initial GeoArchive use case is for using a Zotero group library as a repository of document-type materials. Zotero is a reference management software tool that includes an online shared storage offering where Group Libraries can be set up for citation metadata and attached file content. This module leverages the pyzotero package to create an instance of an API connection to a specified Group Library in Zotero and a set of functions for working with that connection in a variety of ways. It requires a library_id and an api_key, which can be supplied through environment variables or through passed variables in instantiating the connection. Certain functionality also requires the specification of a inventory_item, which is the identifier for a specific item stored in the library that contains a cache of metadata.","title":"Zotero"},{"location":"modules/zotero/#api","text":"class geoarchive.zotero. Zot ( library_id , api_key ) baseline_cache ( self , inventory_item , output_path='data' ) This function takes the files found in a specified output_path (from baseline or update) for items, collections, and tags and uploads these to the specified inventory item in the library. This function can only be successfully operated using an API key with write permissions. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". Returns: bool: False if the API key does not have permission to write to the library baseline_collections ( self , output_path='data' ) This function gets all collections for a library and dumps them as a JSON file to a specified output path. Args: output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". baseline_items ( self , inventory_item , output_path='data' ) This function gets all items (metadata and files) for a library and dumps them as a JSON file to a specified output path. It will strip out any items associated with the inventory item. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". baseline_tags ( self , output_path='data' ) This function gets all tags for a library and dumps them as a JSON file to a specified output path. Args: output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". build_identifier ( self , record ) Builds identifier objects for a particular type of export format. Args: record (series): Dataframe series (record) Returns: list: List of identifier objects/dicts build_link ( self , record ) Builds link objects for a particular type of export format. Args: record (series): Dataframe series (record) Returns: list: List of link objects/dicts collection_tags ( self , geo_tags=True , custom_tags=None ) This is a fairly specialized function that interprets collections from the Zotero library to turn these into additional type-classified tags. Args: geo_tags (bool, optional): Specifies whether or not to check collections for geo names. Defaults to True. custom_tags (list, optional): List of lists of specific types of additional tags that should be found within the collection structure of a library. Defaults to None. Returns: list: List of additional tags as compound, type-classified strings containing a type and term. get_inventory_files ( self , inventory_item ) To facilitate efficient access to larger libraries, we established a method of building and maintaining a specific item in the library where we cache inventory data as JSON files which can be retrieved in lieu of what can be a time-consuming pull of the entire recordset via the API. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library Returns: list: List of dictionaries from the Zotero API containing the inventory item and its files item_export ( self , inventory_item , target_schema='xdd' , output_format='dataframe' ) This function packages the items for a given library using the cached inventory files and returns them for some particular use. We need to better work up the configuration details for this so that we can accept some form of configuration principals that are used to determine the appropriate mappings or transformations. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library target_schema (str, optional): The particular target output being transformed to. Defaults to \"xdd\". output_format (str, optional): Determines the output format for the transformation. Defaults to \"dataframe\". Returns: dataframe/list: Either a dataframe (default) containing the transformation or a list of dicts. load_df_inventory ( self , raw_inventory , tag_delimiter=':' ) This function takes the raw inventory dict containing three sets of records for items, collections, and tags and builds Pandas dataframes for further processing. We do some minimal processing on tags to split these out using a \":\" delimiter by default. Args: raw_inventory (dict): Dictionary contanining three keys with lists for items, collections, and tags from load_raw_inventory() tag_delimiter (str, optional): Delimiter to use in splitting tags into classes. Defaults to \":\". Returns: dict: Dictionary containing three dataframes for items, collections, and tags load_raw_inventory ( self , inventory_item ) This function loads the raw inventory information for items, collections, and tags stored in the inventory item as JSON files. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library Returns: dict: Dictionary containing lists for each set of cached records - items, collections, and tags update_inventory ( self , inventory_item , output_path='data' ) This function handles a periodic refresh of the cached inventory. It reads the current inventory files, determines the last version of the library cached, retrieves new records (items, collections, tags), and updates the cached files. This function can only be successfully operated using an API key with write permissions. Args: inventory_item (str): Alphanumeric identifier for the inventory item in a given library output_path (str, optional): Relative or absolute path to output json file. Defaults to \"data\". Returns: bool: False if the API key does not have permission to write to the library","title":"API"}]}